"use strict";(self.webpackChunkvulkan_doc=self.webpackChunkvulkan_doc||[]).push([[8478],{3713:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>d,metadata:()=>o,toc:()=>s});var t=r(4848),a=r(8453);const d={},i="shader object\u7528\u6cd5",o={permalink:"/blog/21.shader object",source:"@site/blog/21.shader object.md",title:"shader object\u7528\u6cd5",description:"VKEXTshader_object \u662f Vulkan \u7684\u4e00\u4e2a\u6269\u5c55\uff08\u5728 Vulkan 1.3+ \u5e38\u89c1 GPU \u4e0a\u652f\u6301\uff09\uff0c\u5176\u76ee\u6807\u662f\u7b80\u5316 shader \u4f7f\u7528\u6d41\u7a0b\uff0c\u63d0\u4f9b\u4e00\u79cd\u6bd4\u4f20\u7edf pipeline \u66f4\u8f7b\u91cf\u3001\u66f4\u7075\u6d3b\u7684\u65b9\u5f0f\u6765\u7ba1\u7406\u548c\u7ed1\u5b9a\u7740\u8272\u5668\uff0c\u4e0d\u518d\u9700\u8981\u521b\u5efa\u590d\u6742\u7684 graphics/compute pipeline \u5bf9\u8c61\u3002",date:"2025-07-30T13:17:18.000Z",tags:[],readingTime:7.245,hasTruncateMarker:!1,authors:[],frontMatter:{},unlisted:!1,prevItem:{title:"KHR_buffer_device_address\u7684\u7528\u6cd5",permalink:"/blog/20.KHR_buffer_device_address\u7684\u7528\u6cd5"},nextItem:{title:"VkPhysicalDeviceFeatures \u5168\u5b57\u6bb5\u8be6\u89e3",permalink:"/blog/19.physical device features"}},c={authorsImageUrls:[]},s=[{value:"\u2705 \u6838\u5fc3\u4f5c\u7528",id:"-\u6838\u5fc3\u4f5c\u7528",level:2},{value:"\ud83d\ude80 \u4e3b\u8981\u4f18\u52bf",id:"-\u4e3b\u8981\u4f18\u52bf",level:2},{value:"\ud83e\uddf1 \u5173\u952e\u7ed3\u6784\u548c\u51fd\u6570",id:"-\u5173\u952e\u7ed3\u6784\u548c\u51fd\u6570",level:2},{value:"1. \u521b\u5efa Shader Object",id:"1-\u521b\u5efa-shader-object",level:3},{value:"2. \u7ed1\u5b9a Shader\uff08\u4ee3\u66ff <code>vkCmdBindPipeline</code>\uff09",id:"2-\u7ed1\u5b9a-shader\u4ee3\u66ff-vkcmdbindpipeline",level:3},{value:"3. \u8bbe\u7f6e pipeline \u72b6\u6001\uff08dynamic state\uff09",id:"3-\u8bbe\u7f6e-pipeline-\u72b6\u6001dynamic-state",level:3},{value:"4. \u8d44\u6e90\u7ed1\u5b9a\uff08Descriptor Sets\uff09",id:"4-\u8d44\u6e90\u7ed1\u5b9adescriptor-sets",level:3},{value:"5. \u9500\u6bc1 Shader",id:"5-\u9500\u6bc1-shader",level:3},{value:"\ud83d\udce6\u793a\u4f8b\u4ee3\u7801",id:"\u793a\u4f8b\u4ee3\u7801",level:2}];function l(e){const n={blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"VK_EXT_shader_object"})," \u662f Vulkan \u7684\u4e00\u4e2a\u6269\u5c55\uff08\u5728 Vulkan 1.3+ \u5e38\u89c1 GPU \u4e0a\u652f\u6301\uff09\uff0c\u5176\u76ee\u6807\u662f",(0,t.jsx)(n.strong,{children:"\u7b80\u5316 shader \u4f7f\u7528\u6d41\u7a0b"}),"\uff0c\u63d0\u4f9b\u4e00\u79cd\u6bd4\u4f20\u7edf pipeline \u66f4\u8f7b\u91cf\u3001\u66f4\u7075\u6d3b\u7684\u65b9\u5f0f\u6765\u7ba1\u7406\u548c\u7ed1\u5b9a\u7740\u8272\u5668\uff0c",(0,t.jsx)(n.strong,{children:"\u4e0d\u518d\u9700\u8981\u521b\u5efa\u590d\u6742\u7684 graphics/compute pipeline \u5bf9\u8c61"}),"\u3002"]}),"\n",(0,t.jsx)(n.h2,{id:"-\u6838\u5fc3\u4f5c\u7528",children:"\u2705 \u6838\u5fc3\u4f5c\u7528"}),"\n",(0,t.jsx)(n.p,{children:"\u4f20\u7edf Vulkan\uff1a"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"vkCreateShaderModule\r\nvkCreatePipelineLayout\r\nvkCreateGraphicsPipelines\r\nvkBeginCommandBuffer\r\nvkCmdBindPipeline\r\nvkCmdDraw\r\nvkEndCommandBuffer\n"})}),"\n",(0,t.jsxs)(n.p,{children:["\u4f7f\u7528 ",(0,t.jsx)(n.code,{children:"VK_EXT_shader_object"})," \u540e\uff1a"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"vkCreateShadersEXT\r\nvkBeginCommandBuffer\r\nvkCmdBeginRendering\r\nvkCmdBindShadersEXT\r\nvkCmdDraw\r\nvkCmdEndRendering\r\nvkEndCommandBuffer\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-\u4e3b\u8981\u4f18\u52bf",children:"\ud83d\ude80 \u4e3b\u8981\u4f18\u52bf"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\u514d pipeline"}),"\uff1a\u4e0d\u518d\u9700\u8981\u63d0\u524d\u7ec4\u5408\u591a\u4e2a shader \u6210 pipeline"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"shader \u70ed\u63d2\u62d4"}),"\uff1a\u53ef\u4ee5\u52a8\u6001\u66ff\u6362\u5355\u4e2a\u9636\u6bb5\uff08\u5982 fragment shader\uff09"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\u7075\u6d3b"}),"\uff1a\u975e\u5e38\u9002\u5408\u52a8\u6001\u6e32\u67d3\u7cfb\u7edf\u3001\u8c03\u8bd5\u5de5\u5177\u3001\u53ef\u7f16\u7a0b pipeline"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-\u5173\u952e\u7ed3\u6784\u548c\u51fd\u6570",children:"\ud83e\uddf1 \u5173\u952e\u7ed3\u6784\u548c\u51fd\u6570"}),"\n",(0,t.jsx)(n.h3,{id:"1-\u521b\u5efa-shader-object",children:"1. \u521b\u5efa Shader Object"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'VkShaderCreateInfoEXT shaderInfo = {\r\n    .sType = VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT,\r\n    .stage = VK_SHADER_STAGE_VERTEX_BIT,        // \u9636\u6bb5\r\n    .nextStage = VK_SHADER_STAGE_FRAGMENT_BIT,  // \u53ef\u7528\u4e8e\u7ba1\u7ebf\u4f18\u5316\uff08\u53ef\u8bbe\u4e3a 0\uff09\r\n    .codeType = VK_SHADER_CODE_TYPE_SPIRV_EXT,  // SPIR-V \u7c7b\u578b\r\n    .pCode = spirvData,\r\n    .codeSize = spirvSize,\r\n    .pName = "main",                            // entry point\r\n    // \u53ef\u4ee5\u8bbe\u7f6e descriptor layouts \u7b49\uff08\u7c7b\u4f3c pipeline layout\uff09\r\n};\r\n\r\nVkShaderEXT shader;\r\nvkCreateShadersEXT(device, 1, &shaderInfo, nullptr, &shader);\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"2-\u7ed1\u5b9a-shader\u4ee3\u66ff-vkcmdbindpipeline",children:["2. \u7ed1\u5b9a Shader\uff08\u4ee3\u66ff ",(0,t.jsx)(n.code,{children:"vkCmdBindPipeline"}),"\uff09"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"vkCmdBindShadersEXT(\r\n    commandBuffer,\r\n    VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_FRAGMENT_BIT,\r\n    0,                // firstBinding\r\n    &vertexShader,    // pShaders (\u6309\u987a\u5e8f\u63d0\u4f9b\u6bcf\u4e2a\u9636\u6bb5\u7684 shader)\r\n);\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"3-\u8bbe\u7f6e-pipeline-\u72b6\u6001dynamic-state",children:"3. \u8bbe\u7f6e pipeline \u72b6\u6001\uff08dynamic state\uff09"}),"\n",(0,t.jsx)(n.p,{children:"Shader Object \u4e0d\u7ed1\u5b9a pipeline\uff0c\u6240\u4ee5\u4f60\u5fc5\u987b\u901a\u8fc7\u547d\u4ee4\u8bbe\u7f6e pipeline \u52a8\u6001\u72b6\u6001\uff08rasterization, blend, topology \u7b49\uff09\uff1a"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"vkCmdSetRasterizerDiscardEnable(cmd, VK_FALSE);\r\nvkCmdSetDepthTestEnable(cmd, VK_TRUE);\r\nvkCmdSetPrimitiveTopology(cmd, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST);\r\nvkCmdSetViewport(cmd, 0, 1, &viewport);\r\nvkCmdSetScissor(cmd, 0, 1, &scissor);\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["\u6240\u6709 ",(0,t.jsx)(n.code,{children:"VK_DYNAMIC_STATE_*"})," \u90fd\u9700\u8981\u8bbe\u7f6e\uff0c\u5426\u5219\u884c\u4e3a\u672a\u5b9a\u4e49\uff01"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"4-\u8d44\u6e90\u7ed1\u5b9adescriptor-sets",children:"4. \u8d44\u6e90\u7ed1\u5b9a\uff08Descriptor Sets\uff09"}),"\n",(0,t.jsxs)(n.p,{children:["\u4ecd\u7136\u4f7f\u7528\u4f20\u7edf ",(0,t.jsx)(n.code,{children:"vkCmdBindDescriptorSets"})," \u65b9\u5f0f\u6765\u7ed1\u5b9a\u8d44\u6e90\uff08uniforms, textures \u7b49\uff09\uff1a"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"vkCmdBindDescriptorSets(\r\n    cmd,\r\n    VK_PIPELINE_BIND_POINT_GRAPHICS,\r\n    pipelineLayout,\r\n    0, 1, &descriptorSet,\r\n    0, nullptr\r\n);\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"5-\u9500\u6bc1-shader",children:"5. \u9500\u6bc1 Shader"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"vkDestroyShaderEXT(device, shader, nullptr);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"\u793a\u4f8b\u4ee3\u7801",children:"\ud83d\udce6\u793a\u4f8b\u4ee3\u7801"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'#include <vulkan/vulkan.h>\r\n#include <cassert>\r\n#include <cstring>\r\n#include <vector>\r\n#include <iostream>\r\n\r\n// \u8fd9\u91cc\u5047\u5b9a\u4f60\u5df2\u6709\u65b9\u5f0f\u52a0\u8f7d\u6216\u5d4c\u5165 SPIR-V \u4e8c\u8fdb\u5236\u4ee3\u7801\r\n// \u8fd9\u91cc\u4f7f\u7528\u4f2a\u6570\u636e\uff0c\u5b9e\u9645\u4f7f\u7528\u65f6\u8bf7\u52a0\u8f7d\u6709\u6548\u7684 SPIR-V \u6570\u636e\r\nstd::vector<uint32_t> vertexShaderSPIRV = {/* ... Vertex SPIR-V \u5b57\u8282\u7801 ... */};\r\nstd::vector<uint32_t> fragmentShaderSPIRV = {/* ... Fragment SPIR-V \u5b57\u8282\u7801 ... */};\r\n\r\n// \u7b80\u5355\u7684\u9519\u8bef\u5904\u7406\u5b8f\r\n#define VK_CHECK(result) assert((result) == VK_SUCCESS)\r\n\r\n// \u4f2a\u51fd\u6570\uff1a\u521b\u5efa Vulkan instance\u3001device\u3001command pool \u7b49\r\n// \u8fd9\u91cc\u53ea\u7ed9\u51fa\u7b80\u7565\u6d41\u7a0b\uff0c\u5b9e\u9645\u5de5\u7a0b\u9700\u8981\u5b8c\u6574\u521d\u59cb\u5316\u4ee3\u7801\r\nstruct VulkanContext {\r\n    VkInstance instance;\r\n    VkPhysicalDevice physicalDevice;\r\n    VkDevice device;\r\n    VkQueue graphicsQueue;\r\n    VkCommandPool commandPool;\r\n    // \u5176\u5b83\u6210\u5458\u5982\u4ea4\u6362\u94fe\u3001\u5448\u73b0\u76ee\u6807 imageView \u7b49\uff08\u672c\u793a\u4f8b\u4e2d\u7528\u4f5c dynamic rendering \u76ee\u6807\uff09\r\n};\r\nVulkanContext initVulkan() {\r\n    VulkanContext ctx = {};\r\n    // \u2500\u2500 \u521b\u5efa instance (\u786e\u4fdd\u542f\u7528 VK_KHR_dynamic_rendering \u6269\u5c55) \u2500\u2500\r\n    const char* instanceExtensions[] = {\r\n        "VK_KHR_surface",\r\n        "VK_KHR_win32_surface", // \u4f8b\u5982 Windows \u5e73\u53f0\r\n        // \u5176\u5b83\u5e73\u53f0\u8bf7\u9009\u62e9\u5bf9\u5e94\u6269\u5c55\r\n    };\r\n\r\n    VkApplicationInfo appInfo = {};\r\n    appInfo.sType = VK_STRUCTURE_TYPE_APPLICATION_INFO;\r\n    appInfo.pApplicationName   = "ShaderObjectTriangle";\r\n    appInfo.applicationVersion = VK_MAKE_VERSION(1, 0, 0);\r\n    appInfo.pEngineName        = "None";\r\n    appInfo.engineVersion      = VK_MAKE_VERSION(1, 0, 0);\r\n    appInfo.apiVersion         = VK_API_VERSION_1_3; // \u6216 Vulkan 1.2 \u52a0\u6269\u5c55\r\n\r\n    VkInstanceCreateInfo instCreateInfo = {};\r\n    instCreateInfo.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;\r\n    instCreateInfo.pApplicationInfo = &appInfo;\r\n    instCreateInfo.enabledExtensionCount = sizeof(instanceExtensions) / sizeof(instanceExtensions[0]);\r\n    instCreateInfo.ppEnabledExtensionNames = instanceExtensions;\r\n    VK_CHECK(vkCreateInstance(&instCreateInfo, nullptr, &ctx.instance));\r\n\r\n    // \u2500\u2500 \u9009\u62e9\u7269\u7406\u8bbe\u5907\uff0c\u5e76\u521b\u5efa\u903b\u8f91\u8bbe\u5907 \u2500\u2500\r\n    uint32_t gpuCount = 0;\r\n    VK_CHECK(vkEnumeratePhysicalDevices(ctx.instance, &gpuCount, nullptr));\r\n    assert(gpuCount > 0);\r\n    std::vector<VkPhysicalDevice> devices(gpuCount);\r\n    VK_CHECK(vkEnumeratePhysicalDevices(ctx.instance, &gpuCount, devices.data()));\r\n    ctx.physicalDevice = devices[0]; // \u7b80\u5355\u9009\u62e9\u7b2c\u4e00\u4e2a\r\n\r\n    // \u542f\u7528\u9700\u8981\u7684 device \u6269\u5c55\uff1a\u52a8\u6001\u6e32\u67d3 & shader object\r\n    const char* deviceExtensions[] = {\r\n        "VK_KHR_dynamic_rendering",\r\n        "VK_EXT_shader_object"\r\n    };\r\n\r\n    float queuePriority = 1.0f;\r\n    VkDeviceQueueCreateInfo queueCreateInfo = {};\r\n    queueCreateInfo.sType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO;\r\n    queueCreateInfo.queueFamilyIndex = 0; // \u6b64\u5904\u5047\u5b9a family 0 \u652f\u6301\u56fe\u5f62\r\n    queueCreateInfo.queueCount = 1;\r\n    queueCreateInfo.pQueuePriorities = &queuePriority;\r\n\r\n    VkPhysicalDeviceFeatures deviceFeatures = {};\r\n    VkDeviceCreateInfo devCreateInfo = {};\r\n    devCreateInfo.sType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO;\r\n    devCreateInfo.queueCreateInfoCount = 1;\r\n    devCreateInfo.pQueueCreateInfos = &queueCreateInfo;\r\n    devCreateInfo.enabledExtensionCount = 2;\r\n    devCreateInfo.ppEnabledExtensionNames = deviceExtensions;\r\n    devCreateInfo.pEnabledFeatures = &deviceFeatures;\r\n    VK_CHECK(vkCreateDevice(ctx.physicalDevice, &devCreateInfo, nullptr, &ctx.device));\r\n\r\n    vkGetDeviceQueue(ctx.device, 0, 0, &ctx.graphicsQueue);\r\n\r\n    // \u2500\u2500 \u521b\u5efa command pool \u2500\u2500\r\n    VkCommandPoolCreateInfo poolInfo = {};\r\n    poolInfo.sType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;\r\n    poolInfo.queueFamilyIndex = 0;\r\n    poolInfo.flags = VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT;\r\n    VK_CHECK(vkCreateCommandPool(ctx.device, &poolInfo, nullptr, &ctx.commandPool));\r\n\r\n    return ctx;\r\n}\r\n\r\n// \u4e3b\u51fd\u6570\r\nint main() {\r\n    VulkanContext ctx = initVulkan();\r\n\r\n    // \u83b7\u53d6 VK_EXT_shader_object \u7684\u51fd\u6570\u6307\u9488\r\n    auto vkCreateShadersEXT = reinterpret_cast<PFN_vkCreateShadersEXT>(\r\n        vkGetDeviceProcAddr(ctx.device, "vkCreateShadersEXT"));\r\n    auto vkCmdBindShadersEXT = reinterpret_cast<PFN_vkCmdBindShadersEXT>(\r\n        vkGetDeviceProcAddr(ctx.device, "vkCmdBindShadersEXT"));\r\n    auto vkDestroyShaderEXT = reinterpret_cast<PFN_vkDestroyShaderEXT>(\r\n        vkGetDeviceProcAddr(ctx.device, "vkDestroyShaderEXT"));\r\n    assert(vkCreateShadersEXT && vkCmdBindShadersEXT && vkDestroyShaderEXT);\r\n\r\n    // \u2500\u2500 \u521b\u5efa Shader Object \u2500\u2500\r\n    VkShaderEXT vertexShader = VK_NULL_HANDLE;\r\n    VkShaderEXT fragmentShader = VK_NULL_HANDLE;\r\n\r\n    // \u914d\u7f6e\u9876\u70b9\u7740\u8272\u5668\r\n    VkShaderCreateInfoEXT vertexShaderInfo = {};\r\n    vertexShaderInfo.sType      = VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT;\r\n    vertexShaderInfo.stage      = VK_SHADER_STAGE_VERTEX_BIT;\r\n    vertexShaderInfo.codeType   = VK_SHADER_CODE_TYPE_SPIRV_EXT;\r\n    vertexShaderInfo.pCode      = vertexShaderSPIRV.data();\r\n    vertexShaderInfo.codeSize   = vertexShaderSPIRV.size() * sizeof(uint32_t);\r\n    vertexShaderInfo.pName      = "main"; // entry point\r\n\r\n    VK_CHECK(vkCreateShadersEXT(ctx.device, 1, &vertexShaderInfo, nullptr, &vertexShader));\r\n\r\n    // \u914d\u7f6e\u7247\u5143\u7740\u8272\u5668\r\n    VkShaderCreateInfoEXT fragmentShaderInfo = {};\r\n    fragmentShaderInfo.sType    = VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT;\r\n    fragmentShaderInfo.stage    = VK_SHADER_STAGE_FRAGMENT_BIT;\r\n    fragmentShaderInfo.codeType = VK_SHADER_CODE_TYPE_SPIRV_EXT;\r\n    fragmentShaderInfo.pCode    = fragmentShaderSPIRV.data();\r\n    fragmentShaderInfo.codeSize = fragmentShaderSPIRV.size() * sizeof(uint32_t);\r\n    fragmentShaderInfo.pName    = "main"; // entry point\r\n\r\n    VK_CHECK(vkCreateShadersEXT(ctx.device, 1, &fragmentShaderInfo, nullptr, &fragmentShader));\r\n\r\n    // \u2500\u2500 \u521b\u5efa Command Buffer \u2500\u2500\r\n    VkCommandBufferAllocateInfo allocInfo = {};\r\n    allocInfo.sType              = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;\r\n    allocInfo.commandPool        = ctx.commandPool;\r\n    allocInfo.level              = VK_COMMAND_BUFFER_LEVEL_PRIMARY;\r\n    allocInfo.commandBufferCount = 1;\r\n    VkCommandBuffer cmdBuffer;\r\n    VK_CHECK(vkAllocateCommandBuffers(ctx.device, &allocInfo, &cmdBuffer));\r\n\r\n    // \u5f00\u59cb\u5f55\u5236\u547d\u4ee4\r\n    VkCommandBufferBeginInfo beginInfo = {};\r\n    beginInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;\r\n    VK_CHECK(vkBeginCommandBuffer(cmdBuffer, &beginInfo));\r\n\r\n    // \u2500\u2500 \u52a8\u6001\u6e32\u67d3\u8bbe\u7f6e \u2500\u2500\r\n    // \u5047\u5b9a\u6211\u4eec\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e2a\u76ee\u6807 color image \u548c image view\uff08renderTargetView\uff09\r\n    // \u8fd9\u91cc\u4e3a\u793a\u4f8b\u4f7f\u7528\u4f2a\u53d8\u91cf\r\n    VkImageView renderTargetView = VK_NULL_HANDLE; // \u5b9e\u9645\u4ee3\u7801\u4e2d\u5e94\u4e3a\u6709\u6548\u7684 VkImageView\r\n    VkExtent2D renderExtent = {800, 600}; // \u793a\u4f8b\u7a97\u53e3\u5c3a\u5bf8\r\n\r\n    VkRenderingAttachmentInfo colorAttachment = {};\r\n    colorAttachment.sType         = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO;\r\n    colorAttachment.imageView     = renderTargetView;\r\n    colorAttachment.imageLayout   = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;\r\n    colorAttachment.loadOp        = VK_ATTACHMENT_LOAD_OP_CLEAR;\r\n    colorAttachment.storeOp       = VK_ATTACHMENT_STORE_OP_STORE;\r\n    colorAttachment.clearValue.color.float32[0] = 0.0f;\r\n    colorAttachment.clearValue.color.float32[1] = 0.0f;\r\n    colorAttachment.clearValue.color.float32[2] = 0.0f;\r\n    colorAttachment.clearValue.color.float32[3] = 1.0f;\r\n\r\n    VkRenderingInfo renderingInfo = {};\r\n    renderingInfo.sType                 = VK_STRUCTURE_TYPE_RENDERING_INFO;\r\n    renderingInfo.renderArea.offset     = {0, 0};\r\n    renderingInfo.renderArea.extent     = renderExtent;\r\n    renderingInfo.layerCount            = 1;\r\n    renderingInfo.colorAttachmentCount  = 1;\r\n    renderingInfo.pColorAttachments     = &colorAttachment;\r\n    // \u672c\u4f8b\u4e0d\u4f7f\u7528\u6df1\u5ea6/\u6a21\u677f\uff0c\u56e0\u6b64 pDepthAttachment \u548c pStencilAttachment \u4e3a nullptr\r\n\r\n    // \u5f00\u59cb\u52a8\u6001\u6e32\u67d3\r\n    vkCmdBeginRendering(cmdBuffer, &renderingInfo);\r\n\r\n    // \u2500\u2500 \u7ed1\u5b9a Shader Objects \u2500\u2500\r\n    // \u4e3a\u9876\u70b9\u548c\u7247\u5143\u9636\u6bb5\u5206\u522b\u7ed1\u5b9a shader object\r\n    VkShaderEXT shaders[2] = { vertexShader, fragmentShader };\r\n    // stageFlags \u6307\u5b9a\u9700\u8981\u7ed1\u5b9a\u7684 shader \u9636\u6bb5\uff08\u672c\u4f8b\u4e3a\u9876\u70b9\u548c\u7247\u5143\uff09\r\n    VkShaderStageFlags stageFlags = VK_SHADER_STAGE_VERTEX_BIT | VK_SHADER_STAGE_FRAGMENT_BIT;\r\n    // firstBinding \u53ef\u8bbe\u7f6e\u4e3a 0\r\n    vkCmdBindShadersEXT(cmdBuffer, stageFlags, 0, 2, shaders);\r\n\r\n    // \u2500\u2500 \u8bbe\u7f6e\u52a8\u6001\u72b6\u6001 \u2500\u2500\r\n    VkViewport viewport = {};\r\n    viewport.x        = 0.0f;\r\n    viewport.y        = 0.0f;\r\n    viewport.width    = static_cast<float>(renderExtent.width);\r\n    viewport.height   = static_cast<float>(renderExtent.height);\r\n    viewport.minDepth = 0.0f;\r\n    viewport.maxDepth = 1.0f;\r\n    vkCmdSetViewport(cmdBuffer, 0, 1, &viewport);\r\n\r\n    VkRect2D scissor = {};\r\n    scissor.offset = {0, 0};\r\n    scissor.extent = renderExtent;\r\n    vkCmdSetScissor(cmdBuffer, 0, 1, &scissor);\r\n\r\n    // \u6b64\u5916\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u8bbe\u7f6e\u5176\u5b83\u52a8\u6001\u72b6\u6001\uff08\u4f8b\u5982\u6df7\u5408\u3001\u5149\u6805\u5316\u72b6\u6001\u7b49\uff09\uff0c\u89c6\u4f60\u7684\u6e32\u67d3\u9700\u8981\u800c\u5b9a\r\n\r\n    // \u2500\u2500 \u7ed8\u5236\u4e09\u89d2\u5f62 \u2500\u2500\r\n    // \u6b64\u5904\u672a\u7ed1\u5b9a vertex buffers\uff0c\u5047\u8bbe vertex shader \u5185\u90e8\u751f\u6210\u9876\u70b9\u6570\u636e\uff08\u4f7f\u7528\u5185\u7f6e\u53d8\u91cf\u6216\u5176\u4ed6\u6280\u672f\uff09\r\n    // \u6700\u7b80\u5355\u7684\u60c5\u51b5\u76f4\u63a5\u53d1\u8d77 3 \u4e2a\u9876\u70b9\u7684 draw \u8c03\u7528\r\n    vkCmdDraw(cmdBuffer, 3, 1, 0, 0);\r\n\r\n    // \u7ed3\u675f\u52a8\u6001\u6e32\u67d3\r\n    vkCmdEndRendering(cmdBuffer);\r\n\r\n    // \u7ed3\u675f\u547d\u4ee4\u7f13\u51b2\u5f55\u5236\r\n    VK_CHECK(vkEndCommandBuffer(cmdBuffer));\r\n\r\n    // \u2500\u2500 \u63d0\u4ea4\u547d\u4ee4\u7f13\u51b2\u5e76\u7b49\u5f85\u6267\u884c\u5b8c\u6210 \u2500\u2500\r\n    VkSubmitInfo submitInfo = {};\r\n    submitInfo.sType              = VK_STRUCTURE_TYPE_SUBMIT_INFO;\r\n    submitInfo.commandBufferCount = 1;\r\n    submitInfo.pCommandBuffers    = &cmdBuffer;\r\n    VK_CHECK(vkQueueSubmit(ctx.graphicsQueue, 1, &submitInfo, VK_NULL_HANDLE));\r\n    VK_CHECK(vkQueueWaitIdle(ctx.graphicsQueue));\r\n\r\n    // \u2500\u2500 \u6e05\u7406 Shader Objects \u53ca\u5176\u5b83\u8d44\u6e90 \u2500\u2500\r\n    vkDestroyShaderEXT(ctx.device, vertexShader, nullptr);\r\n    vkDestroyShaderEXT(ctx.device, fragmentShader, nullptr);\r\n\r\n    // \u6e05\u7406\u5176\u5b83 Vulkan \u5bf9\u8c61\uff08command pool\u3001device\u3001instance \u7b49\uff09\r\n    vkDestroyCommandPool(ctx.device, ctx.commandPool, nullptr);\r\n    vkDestroyDevice(ctx.device, nullptr);\r\n    vkDestroyInstance(ctx.instance, nullptr);\r\n\r\n    std::cout << "Shader Object Triangle rendered successfully.\\n";\r\n    return 0;\r\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var t=r(6540);const a={},d=t.createContext(a);function i(e){const n=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(d.Provider,{value:n},e.children)}}}]);